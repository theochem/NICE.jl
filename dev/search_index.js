var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = NICE","category":"page"},{"location":"api/#API-Documentation","page":"API","title":"API Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [NICE]","category":"page"},{"location":"api/#NICE.NICE","page":"API","title":"NICE.NICE","text":"NICE (N-species Ice Table) module – provides simultaneous equilibria solvers:\n\nsimulate Net-event kinetic Monte Carlo solver\nsolve Nonlinear equations solver (Newton trust region method)\n\nThe ReactionSystem type is provided as an interface for these solvers.\n\n\n\n\n\n","category":"module"},{"location":"api/#NICE.ReactionSystem","page":"API","title":"NICE.ReactionSystem","text":"Definition of the simultaneous equilibria reaction system. This type is the input to the solver functions simulate and solve, and is updated in-place.\n\nThe reaction system consists of\n\nM Reactions involving N species;\na matrix C = left(c_mnright) defining the stoichiometry of the system; rows correspond to species and columns correspond to reactions; each element is the stoichoimetric coefficient of the nth species in the mth reaction, and is positive if the species is a product, and negative if it is a reactant;\nthe forward and reverse rate constants k_f and k_r for each reaction;\ninitial concentrations or activities mathbfa = left(a_nright) of each species;\n\nand can be written (through some abuse of notation) as\n\nbeginaligned\nsum_left n middle c_1n  0 right leftc_1nright I_n\n    xrightleftharpoonsk_r^left(1right)k_f^left(1right)\n    sum_left n middle c_1n  0 right leftc_1nright I_n\n    \nvdots      vdots\n    \nsum_left n middle c_mn  0 right leftc_mnright I_n\n    xrightleftharpoonsk_r^left(Mright)k_f^left(Mright)\n    sum_left n middle c_Mn  0 right leftc_Mnright I_n\nendaligned\n\n\n\n\n\n","category":"type"},{"location":"api/#NICE.ReactionSystem-Tuple{AbstractMatrix{Float64}, AbstractVector{Float64}, AbstractVector{Float64}, AbstractVector{Float64}}","page":"API","title":"NICE.ReactionSystem","text":"ReactionSystem(stoich, concs, rev_rate_consts, fwd_rate_consts)\n\nInstantiate a ReactionSystem instance using the forward and reverse rate constants for each reaction.\n\n\n\n\n\n","category":"method"},{"location":"api/#NICE.ReactionSystem-Tuple{AbstractMatrix{Float64}, AbstractVector{Float64}, AbstractVector{Float64}}","page":"API","title":"NICE.ReactionSystem","text":"ReactionSystem(stoich, concs, K_eqs; φ)\n\nInstantiate a ReactionSystem instance using the equilibrium constants K_texteq^left(mright) to derive the forward and reverse rate constants for each reaction:\n\nbeginaligned\nk_r = fracphiK_texteq - 1 \nk_f = phi - k_r\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"api/#NICE.simulate-Tuple{ReactionSystem}","page":"API","title":"NICE.simulate","text":"simulate(rxn_system;\n         n_iter=Int(1e+8), chunk_iter=Int(1e+4),\n         ε=1.0e-4, ε_scale=1.0, ε_concs=0.0,\n         tol_t=Inf, tol_ε=0.0, tol_concs=0.0)\n\nRun a Net-Event Kinetic Monte Carlo (NEKMC) simulation to find the equilibrium concentrations of the reaction system.\n\n\n\n\n\n","category":"method"},{"location":"api/#NICE.solve-Tuple{ReactionSystem, AbstractVector{Float64}}","page":"API","title":"NICE.solve","text":"solve(rxn_system, K_eqs; maxiters=1000, abstol=1.0e-9, reltol=0.0)\n\nSolve the system deterministically.\n\nThis method solves a linear least squares problem to get an initial guess for mathbfxi,\n\nleft(c_mnright)^T left(xi_m^left(0right)right) =\n    left(a_n - a_n^left(0right)right)\n\nand then optimizes the equation for the simultaneous equilibria,\n\nK_texteq^left(mright) =\n    prod_n=1^N left( a_n^left(0right) +\n    sum_m=1^M c_mn xi_m right)^c_mn\n\nusing user-provided K_\texteq values and the Newton's method + Trust Region method.\n\n\n\n\n\n","category":"method"},{"location":"api/#NICE.solve-Tuple{ReactionSystem}","page":"API","title":"NICE.solve","text":"solve(rxn_system, K_eqs; maxiters=1000, abstol=1.0e-9, reltol=0.0)\n\nSolve the system deterministically.\n\nThis method solves a linear least squares problem to get an initial guess for mathbfxi,\n\nleft(c_mnright)^T left(xi_m^left(0right)right) =\n    left(a_n - a_n^left(0right)right)\n\nand then optimizes the equation for the simultaneous equilibria,\n\nK_texteq^left(mright) =\n    prod_n=1^N left( a_n^left(0right) +\n    sum_m=1^M c_mn xi_m right)^c_mn\n\nusing Newton's method + Trust Region.\n\nInstead of specifying the K_texteq values directly, they are approximated here using the forward or reverse rate constants and a parameter phi.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = NICE","category":"page"},{"location":"#NICE.jl","page":"Home","title":"NICE.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NICE.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"api.md\"]","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
